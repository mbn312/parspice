import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_MAC
import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.4.31"
}

ext {
    root = rootProject.projectDir
    def kv = ['windows': FAMILY_WINDOWS, 'osx': FAMILY_MAC].find { isFamily(it.value) }
    os = (kv ? kv.key : 'linux')+'_x86-64'
}

group 'parspice'
version '1.0'

repositories {
    mavenCentral()
    maven { url 'https://cae-artifactory.jpl.nasa.gov:443/artifactory/maven-libs-release-local' }
    maven { url 'https://cae-artifactory.jpl.nasa.gov:443/artifactory/maven-libs-snapshot-local' }
}

sourceSets {
    bench {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    benchImplementation group: 'gov.nasa.jpl.blackbird', name: 'JNISpice', version: 'v2018-04'
    benchImplementation group: 'org.apache.commons', name: 'commons-math3', version: '3.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'parspice'
            from components.java
        }
    }
}

task testJar(type: Jar, dependsOn: classes) {
    manifest {
        attributes 'Implementation-Title': 'ParSPICE Testing Jar'
    }
    archiveBaseName.set("testing")
    archiveVersion.set("")
    from {
        sourceSets.test.output
    }
    from {
        configurations.testCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    with jar
}

tasks.test.dependsOn(tasks.testJar)

test {
    useJUnitPlatform()
}

compileBenchKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
    doFirst {
        if (System.getenv("JNISPICE_LIB") == null) {
            println "Please set JNISPICE_LIB environment variable"
            throw new IOException("JNISPICE_LIB was null")
        }
    }
}

task benchJar(type: Jar, dependsOn: classes) {
    manifest {
        attributes 'Implementation-Title': 'ParSPICE Benchmarking Jar'
    }
    archiveBaseName.set("bench")
    archiveVersion.set("")
    from {
        sourceSets.bench.output
    }
    from {
        configurations.benchCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    with jar
}

task runBenchmark(type: JavaExec, dependsOn: benchJar) {
    def libPath = "${System.getenv('JNISPICE_LIB')}"
    jvmArgs = [
            "-Djava.library.path=$libPath",
            // TODO vis: remove this once Java3D is removed, see: https://jogamp.org/bugzilla/show_bug.cgi?id=1317#c7
            '--illegal-access=warn'
    ]
    description = "Run the benchmarking jar"
    classpath = files(tasks.benchJar)
    main = "parspiceBench.BenchmarkKt"
    onlyIf {
        tasks.benchJar.didWork || !file("benchmark_log.csv").exists()
    }
}

task benchmark(type: JavaExec, dependsOn: runBenchmark) {
    description = "Performs simple regression on benchmark data"
    classpath = files(tasks.benchJar)
    main = "parspiceBench.AnalysisKt"
}

clean {
	delete "benchmark_log.csv"
}

task printInfo() {
    doFirst {
        println "Configurations:"
        configurations.each { conf ->
            println conf.name
        }
        println ""
    }
    doLast{
        println "Source Sets:"
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            println ""
        }
    }
}
